<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PZXBC&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/81111cfe0f039032c0ebaf8072cee649</icon>
  <subtitle>学以致用</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.pzxbc.com/"/>
  <updated>2019-05-15T10:01:07.981Z</updated>
  <id>http://blog.pzxbc.com/</id>
  
  <author>
    <name>盆栽小白菜</name>
    <email>pzxbc@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://blog.pzxbc.com/2019/05/15/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2019/%E9%87%8D%E5%AD%A6C%EF%BC%9A%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/"/>
    <id>http://blog.pzxbc.com/2019/05/15/技术/每周整理/2019/重学C：缓冲区溢出攻击/</id>
    <published>2019-05-15T10:01:07.981Z</published>
    <updated>2019-05-15T10:01:07.981Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="每周整理" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/"/>
    
      <category term="2019" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2019/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.pzxbc.com/2019/05/15/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2019/%E6%B5%8B%E8%AF%95/"/>
    <id>http://blog.pzxbc.com/2019/05/15/技术/每周整理/2019/测试/</id>
    <published>2019-05-15T10:01:07.981Z</published>
    <updated>2019-05-15T10:01:07.981Z</updated>
    
    <content type="html"><![CDATA[<p>title: 测试<br>date: 2019-04-15 19:30:00<br>updated: 2019-04-15 19:30:00</p><h2 id="permalink-test"><a href="#permalink-test" class="headerlink" title="permalink: test"></a>permalink: test</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">char</span>* p1 = <span class="string">"20180415"</span>;</span><br><span class="line"><span class="keyword">char</span>* p2 = <span class="string">"20180416"</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="built_in">strcmp</span>(p2, p1);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> rand_val = rand();</span><br><span class="line"><span class="keyword">int</span> exit_res = rand_val % <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (exit_res &gt; <span class="number">50</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"im not exit"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 测试&lt;br&gt;date: 2019-04-15 19:30:00&lt;br&gt;updated: 2019-04-15 19:30:00&lt;/p&gt;
&lt;h2 id=&quot;permalink-test&quot;&gt;&lt;a href=&quot;#permalink-test&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="每周整理" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/"/>
    
      <category term="2019" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2019/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.pzxbc.com/2019/05/15/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2019/%E9%87%8D%E5%AD%A6C%EF%BC%9A%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.pzxbc.com/2019/05/15/技术/每周整理/2019/重学C：一些语法记录/</id>
    <published>2019-05-15T10:01:07.981Z</published>
    <updated>2019-05-15T10:01:07.981Z</updated>
    
    <content type="html"><![CDATA[<p>最近温习了c语言，看的书有 learn c the hard way </p><p>温故而知新，记录下一些自己不熟悉的。</p><p>1，<br>2，</p><p>c直接中括号初始化</p><p>以前自己的写法都是定义变量后然后调用memset，写起来比较麻烦，这样写就简明很多<br>发现有些语法自己不怎么熟悉，记录一下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近温习了c语言，看的书有 learn c the hard way &lt;/p&gt;
&lt;p&gt;温故而知新，记录下一些自己不熟悉的。&lt;/p&gt;
&lt;p&gt;1，&lt;br&gt;2，&lt;/p&gt;
&lt;p&gt;c直接中括号初始化&lt;/p&gt;
&lt;p&gt;以前自己的写法都是定义变量后然后调用memset，写起来比较麻烦，这样
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="每周整理" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/"/>
    
      <category term="2019" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2019/"/>
    
    
  </entry>
  
  <entry>
    <title>Ftp服务器搭建</title>
    <link href="http://blog.pzxbc.com/2019/05/15/ftp-server-setup.md/"/>
    <id>http://blog.pzxbc.com/2019/05/15/ftp-server-setup.md/</id>
    <published>2019-05-15T08:45:31.000Z</published>
    <updated>2019-05-15T08:45:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录的是在<code>Debian 8</code>服务器上配置FTP服务器的操作以及问题，其他系统不一定适用</p></blockquote><p>工作上的需求，需要搭建一个FTP服务器，本来以为只需要安装完毕，设置下路径就好了。但是一路配置下来，发现又好多坑，简单的事情也不简单:pensive:…</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>在<code>Debian</code>上，选用了<code>vsftpd</code>来作FTP服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>安装完毕后，FTP服务就默认启动了，可以使用<code>sudo service vsftpd status</code>查看FTP服务状态。<code>vsftpd</code>的配置文件路径为<code>/etc/vsftpd.conf</code></p><h3 id="2-1-创建用户"><a href="#2-1-创建用户" class="headerlink" title="2.1 创建用户"></a>2.1 创建用户</h3><p><code>vsftpd</code>可以使用系统用户来登陆，我们先创建一个专门用于FTP登陆的账号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">sudo groupadd ftpuser</span><br><span class="line">sudo mkdir /home/ftpshare</span><br><span class="line">sudo useradd -g ftpuser remote1</span><br><span class="line">sudo passwd remote1</span><br><span class="line"><span class="comment"># 修改文件夹属性</span></span><br><span class="line">sudo chown -R remote1:ftpuser /home/ftpshare</span><br></pre></td></tr></table></figure><p>修改<code>/etc/passwd</code>，设置用户没有登陆shell，避免FTP用户可以SSH登陆</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">remote1:x:8001:8001::/home/ftpshare:/usr/sbin/nologin</span><br></pre></td></tr></table></figure><h3 id="2-1-FTP配置允许登陆的用户"><a href="#2-1-FTP配置允许登陆的用户" class="headerlink" title="2.1 FTP配置允许登陆的用户"></a>2.1 FTP配置允许登陆的用户</h3><p>默认<code>vsftpd</code>的配置是允许所有的系统用户登陆的，可以设置指定哪些用户登陆。<code>/etc/vsftpd.conf</code>添加下面配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">userlist_file=/etc/vsftpd.userlist</span><br><span class="line">userlist_enable=YES</span><br><span class="line">userlist_deny=NO</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">tcp_wrappers=YES</span><br></pre></td></tr></table></figure><p>创建<code>/etc/vsftpd.userlist</code>文件，写入允许登陆的用户名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo touch /etc/vsftpd.userlist</span><br><span class="line">sudo <span class="built_in">echo</span> remote1 &gt; /etc/vsftpd.userlist</span><br></pre></td></tr></table></figure><p>重启<code>vsftpd</code>服务，应用新的配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service vsftpd restart</span><br></pre></td></tr></table></figure><h3 id="2-2-问题"><a href="#2-2-问题" class="headerlink" title="2.2 问题"></a>2.2 问题</h3><p><strong>1. 530 Login incorrect</strong></p><p>上面配置完重启后，使用FTP客户端(FileZilla)去登陆FTP服务器后，发现返回这个<code>530 Login incorrect</code>错误。这个是由于<code>vsftpd</code>的登陆认证使用了<code>PAM</code>认证导致的。修改<code>/etc/pam.d/vsftpd</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth required pam_shells.so  =&gt; auth required pam_nologin.so</span><br></pre></td></tr></table></figure><p>修改完后，重启FTP服务就可以正常登陆了。导致这个问题产生的原因在于：之前我们为了避免用户SSH登陆，将用户的登陆Shell设置成了<code>nologin</code>，也就是没有登陆Shell，但是在<code>vsftpd</code>的<code>PAM</code>设置中，要求用户一定要有登陆Shell才能登陆，因此我们将它改成不需要Shell也能认证登陆就可以了。<a href="[`PAM`问题解决](https://www.jianshu.com/p/91c7d4a115e0)">^1</a></p><p><strong>2. 限制访问上级目录</strong></p><p>FTP登陆后，发现可以通过<code>..</code>目录访问上级目录，这样对于会泄露其他目录文件信息。添加下面配置来限制访问</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chroot_local_user=YES</span><br><span class="line">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure><blockquote><p><code>allow_writeable_chroot</code>用户控制用户目录是否可以写入的。如果没有添加，在上传文件的时候，会提示错误：500 OOPS: vsftpd: refusing to run with writable root inside chroot()</p></blockquote><p><strong>3. 550 Permission denied</strong></p><p>上述修改后，再次上传文件，发现返回<code>550 Permission denied</code>错误，原来是全局没有开写权限。配置文件开启下面选项</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">write_enable=YES</span><br></pre></td></tr></table></figure><p>重启服务，终于可以正常使用FTP服务了:joy:~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文记录的是在&lt;code&gt;Debian 8&lt;/code&gt;服务器上配置FTP服务器的操作以及问题，其他系统不一定适用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;工作上的需求，需要搭建一个FTP服务器，本来以为只需要安装完毕，设置下路径就好了。但是一路
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="每周整理" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/"/>
    
      <category term="2019" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2019/"/>
    
    
      <category term="ftp" scheme="http://blog.pzxbc.com/tags/ftp/"/>
    
      <category term="debian" scheme="http://blog.pzxbc.com/tags/debian/"/>
    
  </entry>
  
  <entry>
    <title>重学C：可变参数函数原理</title>
    <link href="http://blog.pzxbc.com/2019/04/10/relearn-c-var-args-function/"/>
    <id>http://blog.pzxbc.com/2019/04/10/relearn-c-var-args-function/</id>
    <published>2019-04-10T11:30:00.000Z</published>
    <updated>2019-04-10T11:30:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="每周整理" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/"/>
    
      <category term="2019" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2019/"/>
    
    
      <category term="C" scheme="http://blog.pzxbc.com/tags/C/"/>
    
      <category term="可变参数" scheme="http://blog.pzxbc.com/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>VisualStudio并行编译设置</title>
    <link href="http://blog.pzxbc.com/2019/03/28/visual-studio-parallel-compile-setup/"/>
    <id>http://blog.pzxbc.com/2019/03/28/visual-studio-parallel-compile-setup/</id>
    <published>2019-03-28T08:26:06.000Z</published>
    <updated>2019-03-28T08:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>在多核机器上使用VisualStudio编译C++程序，VisualStudio不会默认开启并行编译，需要进行如下设置</p><ol><li>选取项目属性</li></ol><img src="/2019/03/28/visual-studio-parallel-compile-setup/visual-studio-parallel-compile-setup-01.png"><a id="more"></a><ol start="2"><li>在打开的对话框中，左侧选择 “C/C++”-&gt;“General（常规）”中将“ Multi-processor Compilation(多处理器编译)”打开</li></ol><img src="/2019/03/28/visual-studio-parallel-compile-setup/visual-studio-parallel-compile-setup-02.png"><ol start="3"><li>接着，“C/C++”-&gt;“Code Generation（代码生成）”中将“Enable Minimal Rebuild(启用最小重新生成)”关闭</li></ol><img src="/2019/03/28/visual-studio-parallel-compile-setup/visual-studio-parallel-compile-setup-03.png"><ol start="4"><li>在“Debug(调试)”中选取项目的“Options and Settings (选项和设置）”-&gt;“Projects and Solutions (项目和解决方案)”-&gt;“ Build and Run (编译与运行)”中设置“ maximum number of parallel project builds</li></ol><img src="/2019/03/28/visual-studio-parallel-compile-setup/visual-studio-parallel-compile-setup-04.png"><img src="/2019/03/28/visual-studio-parallel-compile-setup/visual-studio-parallel-compile-setup-05.png"><ol start="5"><li>VC++ Project Settings中设置C++并发编译数</li></ol><img src="/2019/03/28/visual-studio-parallel-compile-setup/visual-studio-parallel-compile-setup-06.png">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在多核机器上使用VisualStudio编译C++程序，VisualStudio不会默认开启并行编译，需要进行如下设置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选取项目属性&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;/2019/03/28/visual-studio-parallel-compile-setup/visual-studio-parallel-compile-setup-01.png&quot;&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="每周整理" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/"/>
    
      <category term="2019" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2019/"/>
    
    
      <category term="VisualStudio" scheme="http://blog.pzxbc.com/tags/VisualStudio/"/>
    
      <category term="并行编译" scheme="http://blog.pzxbc.com/tags/%E5%B9%B6%E8%A1%8C%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>家庭网络自动代理解决方案</title>
    <link href="http://blog.pzxbc.com/2019/01/06/home-router-auto-proxy/"/>
    <id>http://blog.pzxbc.com/2019/01/06/home-router-auto-proxy/</id>
    <published>2019-01-06T14:25:15.000Z</published>
    <updated>2019-01-06T14:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Google Cloud</code>赠送的$300到期了，之前发现连不上<code>AppleStore</code>还以为是网络问题，隔天才发现是<code>Google Cloud</code>到期导致的。没有了免费的服务器资源，就得去找一个了。通过对比，发现<code>Vultr</code>提供的<code>VPS</code>服务性价比比较高。每个月$3.5，提供1个CPU、512M内存、500GB/月流量。对于个人日常翻墙访问国外服务绰绰有余了。也有一个月$2.5的，但是只有IPv6地址，如果你是在学校这种有IPv6环境的地方，使用这个套餐相对会省一点。这个是我的邀请链接<a href="https://www.vultr.com/?ref=7748749" target="_blank" rel="noopener">https://www.vultr.com/?ref=7748749</a>，如果这篇文章对你有用，希望您能使用我的邀请链接~</p><a id="more"></a><p>服务器建议选择东京或者新加坡的，这样延迟会小一点。测试了下东京延迟150ms左右，新加坡延迟250ms左右。新建好的服务器也不一定能够访问，可能给你分配的IP地址已经被<code>GFW</code>封了。可以通过端口检测工具来判断IP地址是否已经被封。在<a href="http://tool.chinaz.com/port/" target="_blank" rel="noopener">国内端口测试网站</a>和<a href="https://www.yougetsignal.com/tools/open-ports/" target="_blank" rel="noopener">国外端口测试网站</a>分别测试服务器IP对应的22端口是否可以访问，如果国外可以访问国内不行，那么这个分配的IP地址已经被封了。可以更换服务器的物理地址或者隔天再重新创建服务器来获取新的IP地址。(立刻销毁，在同一物理地址上重新创建还是会分配原来的IP地址)</p><p>上面说这么多，差不多都是在为<code>Vultr</code>服务商打广告了。之所以会有这篇文章是因为我在重新搭建自动代理的时候发现需配置的地方还挺多的，还是记录下来，不然以后自己都可能需要重新去查怎么布置。</p><h2 id="自动代理解决方案框架图"><a href="#自动代理解决方案框架图" class="headerlink" title="自动代理解决方案框架图"></a>自动代理解决方案框架图</h2><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>服务器上所需要的配置相对来说比较少，只需要安装配置<code>V2ray</code>软件即可。</p><p><a href="https://www.v2ray.com/" target="_blank" rel="noopener"><code>V2RAY</code></a>是一个支持多协议的网络请求转发软件，它可以将一个机器上的网络请求转发到远程服务器上，然后将远程服务器返回的结果转发回请求的机器。</p><h3 id="安装V2ray"><a href="#安装V2ray" class="headerlink" title="安装V2ray"></a>安装V2ray</h3><p>我的服务器系统是<code>Debian</code>的(Ubuntu应该也适用)，其他系统参考官方文档吧。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><h3 id="配置V2ray"><a href="#配置V2ray" class="headerlink" title="配置V2ray"></a>配置V2ray</h3><p><code>V2ray</code>的配置文件是位于<code>/etc/v2ray</code>目录下的<code>config.json</code></p><p>下面的配置支持<code>vmess</code>的<code>tcp</code>和<code>kcp</code>的传入链接。如果你的VPS服务器延迟比较严重，建议使用<code>kcp</code>协议，有加速的效果。这个网站<a href="https://www.uuidgenerator.net/" target="_blank" rel="noopener">https://www.uuidgenerator.net/</a>可以在线生成<code>id</code>。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log"</span> : &#123;</span><br><span class="line">    <span class="attr">"access"</span>: <span class="string">"/var/log/v2ray/access.log"</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"/var/log/v2ray/error.log"</span>,</span><br><span class="line">    <span class="attr">"loglevel"</span>: <span class="string">"warn"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"inbound"</span>: &#123;</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">43608</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"clients"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="string">"a715b4f3-4b4a-4cbf-8a3e-8ab1a537da2f"</span>,</span><br><span class="line">          <span class="attr">"level"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"alterId"</span>: <span class="number">64</span>,</span><br><span class="line">          <span class="attr">"email"</span>: <span class="string">"yourmail@qq.com"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"detour"</span>: &#123;</span><br><span class="line">    <span class="attr">"to"</span>: <span class="string">"detour-kcp"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"kcp"</span>,</span><br><span class="line">        <span class="attr">"kcpSettings"</span>: &#123;</span><br><span class="line">          <span class="attr">"mtu"</span>: <span class="number">1350</span>,</span><br><span class="line">          <span class="attr">"tti"</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">"uplinkCapacity"</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">"downlinkCapacity"</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">"congestion"</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">"readBufferSize"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"writeBufferSize"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"header"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"wechat-video"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"inboundDetour"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">43609</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"inbound-tcp"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"clients"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"a715b4f3-4b4a-4cbf-8a3e-8ab1a537da2f"</span>,</span><br><span class="line">            <span class="attr">"level"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"alterId"</span>: <span class="number">64</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"yourmail@qq.com"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"tcp"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="string">"51001-54000"</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"detour-kcp"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"default"</span>: &#123;</span><br><span class="line">          <span class="attr">"level"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"alterId"</span>: <span class="number">64</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"allocate"</span>: &#123;</span><br><span class="line">        <span class="attr">"strategy"</span>: <span class="string">"random"</span>,</span><br><span class="line">        <span class="attr">"concurrency"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"refresh"</span>: <span class="number">5</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"kcp"</span>,</span><br><span class="line">        <span class="attr">"kcpSettings"</span>: &#123;</span><br><span class="line">          <span class="attr">"mtu"</span>: <span class="number">1350</span>,</span><br><span class="line">          <span class="attr">"tti"</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">"uplinkCapacity"</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">"downlinkCapacity"</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">"congestion"</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">"readBufferSize"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"writeBufferSize"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"header"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"wechat-video"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"outbound"</span>: &#123;</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"outboundDetour"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"blocked"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"routing"</span>: &#123;</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="string">"rules"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"rules"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">          <span class="attr">"ip"</span>: [</span><br><span class="line">            <span class="string">"0.0.0.0/8"</span>,</span><br><span class="line">            <span class="string">"10.0.0.0/8"</span>,</span><br><span class="line">            <span class="string">"100.64.0.0/10"</span>,</span><br><span class="line">            <span class="string">"127.0.0.0/8"</span>,</span><br><span class="line">            <span class="string">"169.254.0.0/16"</span>,</span><br><span class="line">            <span class="string">"172.16.0.0/12"</span>,</span><br><span class="line">            <span class="string">"192.0.0.0/24"</span>,</span><br><span class="line">            <span class="string">"192.0.2.0/24"</span>,</span><br><span class="line">            <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">            <span class="string">"198.18.0.0/15"</span>,</span><br><span class="line">            <span class="string">"198.51.100.0/24"</span>,</span><br><span class="line">            <span class="string">"203.0.113.0/24"</span>,</span><br><span class="line">            <span class="string">"::1/128"</span>,</span><br><span class="line">            <span class="string">"fc00::/7"</span>,</span><br><span class="line">            <span class="string">"fe80::/10"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"transport"</span>: &#123;</span><br><span class="line">    <span class="attr">"kcpSettings"</span>: &#123;</span><br><span class="line">      <span class="attr">"uplinkCapacity"</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">"downlinkCapacity"</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="V2ray服务启动"><a href="#V2ray服务启动" class="headerlink" title="V2ray服务启动"></a>V2ray服务启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart v2ray.service</span><br><span class="line"><span class="comment"># 查看v2ray服务状态</span></span><br><span class="line">sudo systemctl status v2ray.service</span><br></pre></td></tr></table></figure><h2 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h2><p>家里路由器是<code>EdgeRouter PoE 5</code>，系统是基于<code>debian</code>的<code>edgeos</code>。推荐下这个路由器，公司专注于做企业级的产品，产品非常稳定。当然这种路由器只适合爱折腾的人士，需要有相应的知识才能配置使用。</p><h3 id="V2ray安装"><a href="#V2ray安装" class="headerlink" title="V2ray安装"></a>V2ray安装</h3><p><code>ssh</code>登录路由器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换root用户，默认ssh登录账号为ubnt</span></span><br><span class="line">sudo su</span><br><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><p>这个路由器架构是<code>mips64</code>，也可以手动下载<code>v2ray</code>安装包<a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="noopener">v2ray-linux-mips64</a></p><p>然后使用<code>go.sh</code>脚本安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./go.sh -l v2ray-linux-mips64.zip</span><br></pre></td></tr></table></figure><blockquote><p><code>uname -a</code> 查看系统架构</p></blockquote><h3 id="V2ray配置"><a href="#V2ray配置" class="headerlink" title="V2ray配置"></a>V2ray配置</h3><p>路由器上的<code>V2ray</code>配置为中转服务器。</p><p>下面配置支持一下功能</p><ol><li><code>socks</code>、<code>http</code>代理以及基于端口映射的透明代理</li><li><code>DNS</code>代理转发</li></ol><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log"</span>: &#123;</span><br><span class="line">    <span class="attr">"access"</span>: <span class="string">"/var/log/v2ray/access.log"</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"/var/log/v2ray/error.log"</span>,</span><br><span class="line">    <span class="attr">"loglevel"</span>: <span class="string">"warn"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"routing"</span>: &#123;</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="string">"rules"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"rules"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">          <span class="attr">"inboundTag"</span>: [</span><br><span class="line">            <span class="string">"tag-inbound-tcp"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"outboundTag"</span>: <span class="string">"tag-outbound-tcp"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">          <span class="attr">"inboundTag"</span>: [</span><br><span class="line">            <span class="string">"dns-inbound"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"outboundTag"</span>: <span class="string">"tag-outbound-tcp"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"inbound"</span>: &#123;</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">43608</span>,</span><br><span class="line">    <span class="attr">"listen"</span>: <span class="string">"192.168.10.1"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"socks"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"auth"</span>: <span class="string">"noauth"</span>,</span><br><span class="line">      <span class="attr">"udp"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"ip"</span>: <span class="string">"127.0.0.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"inboundDetour"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">"port"</span>: <span class="number">43830</span>,</span><br><span class="line">          <span class="attr">"protocol"</span>: <span class="string">"dokodemo-door"</span>,</span><br><span class="line">          <span class="attr">"settings"</span>: &#123;</span><br><span class="line">              <span class="attr">"address"</span>: <span class="string">"vps_ip_address"</span>,</span><br><span class="line">              <span class="attr">"port"</span>: <span class="number">443</span>,</span><br><span class="line">              <span class="attr">"network"</span>: <span class="string">"tcp,udp"</span>,</span><br><span class="line">              <span class="attr">"timeout"</span>: <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">"protocol"</span>: <span class="string">"http"</span>,</span><br><span class="line">          <span class="attr">"port"</span>: <span class="number">43607</span>,</span><br><span class="line">          <span class="attr">"tag"</span>: <span class="string">"http-proxy"</span>,</span><br><span class="line">          <span class="attr">"listen"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">          <span class="attr">"settings"</span>: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">"port"</span>: <span class="number">43606</span>,</span><br><span class="line">          <span class="attr">"protocol"</span>: <span class="string">"dokodemo-door"</span>,</span><br><span class="line">          <span class="attr">"tag"</span>: <span class="string">"dns-inbound"</span>,</span><br><span class="line">          <span class="attr">"settings"</span>: &#123;</span><br><span class="line">              <span class="attr">"address"</span>: <span class="string">"8.8.8.8"</span>,</span><br><span class="line">              <span class="attr">"port"</span>: <span class="number">53</span>,</span><br><span class="line">              <span class="attr">"network"</span>: <span class="string">"tcp,udp"</span>,</span><br><span class="line">              <span class="attr">"timeout"</span>: <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">"port"</span>: <span class="number">43605</span>,</span><br><span class="line">          <span class="attr">"protocol"</span>: <span class="string">"dokodemo-door"</span>,</span><br><span class="line">          <span class="attr">"settings"</span>: &#123;</span><br><span class="line">              <span class="attr">"network"</span>: <span class="string">"tcp,udp"</span>,</span><br><span class="line">              <span class="attr">"timeout"</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">"followRedirect"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">"port"</span>: <span class="number">43604</span>,</span><br><span class="line">          <span class="attr">"protocol"</span>: <span class="string">"dokodemo-door"</span>,</span><br><span class="line">          <span class="attr">"tag"</span>: <span class="string">"tag-inbound-tcp"</span>,</span><br><span class="line">          <span class="attr">"settings"</span>: &#123;</span><br><span class="line">              <span class="attr">"network"</span>: <span class="string">"tcp,udp"</span>,</span><br><span class="line">              <span class="attr">"timeout"</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">"followRedirect"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"outbound"</span>: &#123;</span><br><span class="line">    <span class="attr">"sendThrough"</span>: <span class="string">"192.168.10.1"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"vnext"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"address"</span>: <span class="string">"服务器IP地址"</span>,</span><br><span class="line">          <span class="attr">"port"</span>: <span class="number">43608</span>,</span><br><span class="line">          <span class="attr">"users"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"id"</span>: <span class="string">"a715b4f3-4b4a-4cbf-8a3e-8ab1a537da2f"</span>,</span><br><span class="line">              <span class="attr">"alterId"</span>: <span class="number">64</span>,</span><br><span class="line">              <span class="attr">"security"</span>: <span class="string">"auto"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"kcp"</span>,</span><br><span class="line">        <span class="attr">"kcpSettings"</span>: &#123;</span><br><span class="line">          <span class="attr">"mtu"</span>: <span class="number">1350</span>,</span><br><span class="line">          <span class="attr">"tti"</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">"uplinkCapacity"</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">"downlinkCapacity"</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">"congestion"</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">"readBufferSize"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"writeBufferSize"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"header"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"wechat-video"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"outboundDetour"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">      <span class="attr">"sendThrough"</span>: <span class="string">"192.168.10.1"</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"tag-outbound-tcp"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"vnext"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"address"</span>: <span class="string">"服务器IP地址"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">43609</span>,</span><br><span class="line">            <span class="attr">"users"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"id"</span>: <span class="string">"a715b4f3-4b4a-4cbf-8a3e-8ab1a537da2f"</span>,</span><br><span class="line">                <span class="attr">"alterId"</span>: <span class="number">64</span>,</span><br><span class="line">                <span class="attr">"security"</span>: <span class="string">"auto"</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"tcp"</span>,</span><br><span class="line">        <span class="attr">"tcpSettings"</span>: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"transport"</span>: &#123;</span><br><span class="line">    <span class="attr">"kcpSettings"</span>: &#123;</span><br><span class="line">      <span class="attr">"uplinkCapactiy"</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">"downlinkCapacity"</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dns"</span>: &#123;</span><br><span class="line">    <span class="attr">"servers"</span>: [</span><br><span class="line">      <span class="string">"8.8.8.8"</span>,</span><br><span class="line">      <span class="string">"8.8.4.4"</span>,</span><br><span class="line">      <span class="string">"localhost"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动代理配置"><a href="#自动代理配置" class="headerlink" title="自动代理配置"></a>自动代理配置</h2><p>上面的配置只是配置好了网络请求转发，以及<code>socks</code>和<code>http</code>代理配置。浏览器已经可以通过设置<code>socks</code>或<code>http</code>代理地址(路由器ip地址)来访问网页了。但是要自动为接入家庭网络的所有设备以及应用代理网络请求，还需要一些额外配置</p><h3 id="DNS请求代理"><a href="#DNS请求代理" class="headerlink" title="DNS请求代理"></a>DNS请求代理</h3><p><code>国家防火墙</code>不光会直接封IP地址，同时也会将域名解析为错误的IP地址，所以首先要确保<code>DNS</code>解析正确。(<code>Chrome</code>浏览器设置<code>socks</code>代理后，<code>DNS</code>也会走代理)</p><h4 id="使用Dnsmasq"><a href="#使用Dnsmasq" class="headerlink" title="使用Dnsmasq"></a>使用Dnsmasq</h4><p><code>edgeos</code>从1.9版本开始支持<code>dnsmasq</code>作为<code>dns</code>服务器。<code>ubnt</code>提供了设置文档<a href="https://help.ubnt.com/hc/en-us/articles/115002673188-EdgeRouter-Using-dnsmasq-for-DHCP-Server" target="_blank" rel="noopener">EdgeRouter-Using-dnsmasq-for-DHCP-Server</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssh需在ubnt账号下运行或者直接网页端的cli界面</span></span><br><span class="line">configure</span><br><span class="line"><span class="built_in">set</span> service dhcp-server use-dnsmasq <span class="built_in">enable</span> </span><br><span class="line">commit</span><br><span class="line">save</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">configure</span><br><span class="line"><span class="built_in">set</span> system name-server 127.0.0.1</span><br><span class="line"><span class="built_in">set</span> service dns forwarding cache-size 400</span><br><span class="line"><span class="built_in">set</span> service dns forwarding listen-on eth1</span><br><span class="line"><span class="built_in">set</span> service dns forwarding listen-on switch0</span><br><span class="line"><span class="built_in">set</span> system domain-name ubnt.home</span><br><span class="line"><span class="comment"># 内网地址解析</span></span><br><span class="line"><span class="built_in">set</span> service dns forwarding options address=/gitlab.ubnt.home/192.168.10.xxx</span><br><span class="line"><span class="built_in">set</span> service dns forwarding options no-resolv</span><br><span class="line"><span class="built_in">set</span> service dns forwarding options listen-address=192.168.10.1</span><br><span class="line"><span class="comment"># dns解析请求转发到V2ray</span></span><br><span class="line"><span class="built_in">set</span> service dns forwarding options server=127.0.0.1<span class="comment">#43606</span></span><br><span class="line"><span class="comment"># 特定域名指定dns服务器，不转发到V2ray</span></span><br><span class="line"><span class="built_in">set</span> service dns forwarding options server=/.bombsquadgame.com/114.114.114.114</span><br><span class="line"><span class="comment"># 解析的域名地址放在noproxy ipset中</span></span><br><span class="line"><span class="built_in">set</span> service dns forwarding options ipset=/.bombsquadgame.com/noproxy</span><br><span class="line">commit</span><br><span class="line">save</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="国内域名解析加速"><a href="#国内域名解析加速" class="headerlink" title="国内域名解析加速"></a>国内域名解析加速</h4><p>上面<code>dns</code>配置会将除特定域名以外的<code>dns</code>请求都通过<code>V2ray</code>转发。但是国内域名的解析不会被防火墙干扰，因此也走代理的话，会导致国内网络请求变慢。网络上有有专门整理好的国内域名列表，下面脚本会自动配置<code>dnsmasq</code>，将国内域名解析都指定为<code>114.114.114.114</code>服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">WORKDIR=<span class="string">"<span class="variable">$(mktemp -d)</span>"</span></span><br><span class="line">SERVERS=(114.114.114.114 114.114.115.115 180.76.76.76)</span><br><span class="line"><span class="comment"># Not using best possible CDN pop: 1.2.4.8 210.2.4.8 223.5.5.5 223.6.6.6</span></span><br><span class="line"><span class="comment"># Dirty cache: 119.29.29.29 182.254.116.116</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CONF_WITH_SERVERS=(accelerated-domains.china google.china apple.china)</span></span><br><span class="line">CONF_WITH_SERVERS=(accelerated-domains.china apple.china)</span><br><span class="line">CONF_SIMPLE=(bogus-nxdomain.china)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Downloading latest configurations..."</span></span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://git.coding.net/felixonmars/dnsmasq-china-list.git <span class="string">"<span class="variable">$WORKDIR</span>"</span></span><br><span class="line"><span class="comment">#git clone --depth=1 https://github.com/felixonmars/dnsmasq-china-list.git "$WORKDIR"</span></span><br><span class="line"><span class="comment">#git clone --depth=1 https://bitbucket.org/felixonmars/dnsmasq-china-list.git "$WORKDIR"</span></span><br><span class="line"><span class="comment">#git clone --depth=1 https://git.oschina.net/felixonmars/dnsmasq-china-list.git "$WORKDIR"</span></span><br><span class="line"><span class="comment">#git clone --depth=1 https://gitlab.com/felixonmars/dnsmasq-china-list.git "$WORKDIR"</span></span><br><span class="line"><span class="comment">#git clone --depth=1 https://code.aliyun.com/felixonmars/dnsmasq-china-list.git "$WORKDIR"</span></span><br><span class="line"><span class="comment">#git clone --depth=1 https://code.csdn.net/felixonmars/dnsmasq-china-list.git "$WORKDIR"</span></span><br><span class="line"><span class="comment">#git clone --depth=1 http://repo.or.cz/dnsmasq-china-list.git "$WORKDIR"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Removing old configurations..."</span></span><br><span class="line"><span class="keyword">for</span> _conf <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;CONF_WITH_SERVERS[@]&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;CONF_SIMPLE[@]&#125;</span>"</span>; <span class="keyword">do</span></span><br><span class="line">  rm -f /etc/dnsmasq.d/<span class="string">"<span class="variable">$_conf</span>"</span>*.conf</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Installing new configurations..."</span></span><br><span class="line"><span class="keyword">for</span> _conf <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;CONF_SIMPLE[@]&#125;</span>"</span>; <span class="keyword">do</span></span><br><span class="line">  cp <span class="string">"<span class="variable">$WORKDIR</span>/<span class="variable">$_conf</span>.conf"</span> <span class="string">"/etc/dnsmasq.d/<span class="variable">$_conf</span>.conf"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _server <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;SERVERS[@]&#125;</span>"</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> _conf <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;CONF_WITH_SERVERS[@]&#125;</span>"</span>; <span class="keyword">do</span></span><br><span class="line">    cp <span class="string">"<span class="variable">$WORKDIR</span>/<span class="variable">$_conf</span>.conf"</span> <span class="string">"/etc/dnsmasq.d/<span class="variable">$_conf</span>.<span class="variable">$_server</span>.conf"</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  sed -i <span class="string">"s|^\(server.*\)/[^/]*$|\1/<span class="variable">$_server</span>|"</span> /etc/dnsmasq.d/*.<span class="string">"<span class="variable">$_server</span>"</span>.conf</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Restarting dnsmasq service..."</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hash</span> systemctl 2&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">  systemctl restart dnsmasq</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">hash</span> service 2&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">  service dnsmasq restart</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Now please restart dnsmasq since I don't know how to do it."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Cleaning up..."</span></span><br><span class="line">rm -r <span class="string">"<span class="variable">$WORKDIR</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>将脚本放在目录中<code>/config/scripts/post-config.d</code>下，这样在路由重启后会自动运行</p></blockquote><h3 id="IP数据包自动转发"><a href="#IP数据包自动转发" class="headerlink" title="IP数据包自动转发"></a>IP数据包自动转发</h3><p><code>dns</code>走代理解析正确后，剩下就是让<code>IP</code>数据包自动走代理。同样的也希望国内IP的数据包不走代理，国外IP地址的数据包自动走代理。</p><p>下面脚本基于<code>ipset</code>以及<code>iptables</code>实现了如下功能:</p><ol><li>创建中国IP地址集以及noproxy(特定IP地址不走代理)代理集</li><li>内网数据包直接访问，不走代理</li><li><code>noproxy</code>集中的IP地址都不走代理</li><li>非中国IP地址都走代理</li><li>只有目标端口1-1024的数据包才会被代理(避免代理bt数据包，差不多其他基本网络服务的端口在这个范围内)</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># config set for chinaip</span></span><br><span class="line">WORKDIR=<span class="string">"<span class="variable">$(mktemp -d)</span>"</span></span><br><span class="line">ipset create chinaip <span class="built_in">hash</span>:net -exist</span><br><span class="line">wget -q -O <span class="string">"<span class="variable">$WORKDIR</span>/cn.zone"</span> http://www.ipdeny.com/ipblocks/data/countries/cn.zone</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(cat <span class="string">"<span class="variable">$WORKDIR</span>/cn.zone"</span>); <span class="keyword">do</span> ipset add chinaip <span class="variable">$i</span> -exist; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">ipset create noproxy <span class="built_in">hash</span>:ip -exist</span><br><span class="line"><span class="comment">#pt.gztown.net pt</span></span><br><span class="line"><span class="comment">#ipset add noproxy 104.37.214.75 -exist</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config for iptables</span></span><br><span class="line">iptables -t nat -N V2RAY</span><br><span class="line">iptables -t nat -A V2RAY -d vps_ip_address -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 0.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 127.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 192.168.0.0/16 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 240.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -m <span class="built_in">set</span> --match-set noproxy dst -p tcp -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -m <span class="built_in">set</span> ! --match-set chinaip dst -p tcp -j REDIRECT --to-ports 43605</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp --dport 1:1024 -j V2RAY</span><br><span class="line">iptables -t nat -A PREROUTING -s 192.168.0.0/16 -p tcp --dport 1:1024 -j V2RAY</span><br></pre></td></tr></table></figure><blockquote><p>同样为了在路由重启后自动运行改脚本，需要将脚本放在<code>/config/scripts/post-config.d</code>目录下</p></blockquote><h2 id="VPN配置"><a href="#VPN配置" class="headerlink" title="VPN配置"></a>VPN配置</h2><p>家庭路由自动代理配置完成后，只有当设备连入家里的路由才能自动代理。家里之外的设备怎么办呢？最方便的就是通过<code>VPN</code>，因为不管手机或者PC都支持VPN。</p><p><code>edgeos</code>配置<code>VPN</code>参考官方文档<a href="https://help.ubnt.com/hc/en-us/articles/204950294-EdgeRouter-L2TP-IPsec-VPN-Server" target="_blank" rel="noopener">https://help.ubnt.com/hc/en-us/articles/204950294-EdgeRouter-L2TP-IPsec-VPN-Server</a>。建议<code>VPN</code>就使用<code>L2tp/IPsec</code>协议，<code>Android</code>和<code>IOS</code>系统默认都支持该协议</p><p><code>VPN</code>配置好后，在外的设备连接<code>VPN</code>，就能自动代理了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Google Cloud&lt;/code&gt;赠送的$300到期了，之前发现连不上&lt;code&gt;AppleStore&lt;/code&gt;还以为是网络问题，隔天才发现是&lt;code&gt;Google Cloud&lt;/code&gt;到期导致的。没有了免费的服务器资源，就得去找一个了。通过对比，发现&lt;code&gt;Vultr&lt;/code&gt;提供的&lt;code&gt;VPS&lt;/code&gt;服务性价比比较高。每个月$3.5，提供1个CPU、512M内存、500GB/月流量。对于个人日常翻墙访问国外服务绰绰有余了。也有一个月$2.5的，但是只有IPv6地址，如果你是在学校这种有IPv6环境的地方，使用这个套餐相对会省一点。这个是我的邀请链接&lt;a href=&quot;https://www.vultr.com/?ref=7748749&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.vultr.com/?ref=7748749&lt;/a&gt;，如果这篇文章对你有用，希望您能使用我的邀请链接~&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="随手记" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="VPS" scheme="http://blog.pzxbc.com/tags/VPS/"/>
    
      <category term="Vultr" scheme="http://blog.pzxbc.com/tags/Vultr/"/>
    
      <category term="EdgeOS" scheme="http://blog.pzxbc.com/tags/EdgeOS/"/>
    
      <category term="V2ray" scheme="http://blog.pzxbc.com/tags/V2ray/"/>
    
      <category term="Proxy" scheme="http://blog.pzxbc.com/tags/Proxy/"/>
    
      <category term="iptables" scheme="http://blog.pzxbc.com/tags/iptables/"/>
    
      <category term="ipset" scheme="http://blog.pzxbc.com/tags/ipset/"/>
    
      <category term="dnsmasq" scheme="http://blog.pzxbc.com/tags/dnsmasq/"/>
    
  </entry>
  
  <entry>
    <title>Flask部署</title>
    <link href="http://blog.pzxbc.com/2018/12/26/%E6%8A%80%E6%9C%AF/Flask/flask-uwsgi-deployment/"/>
    <id>http://blog.pzxbc.com/2018/12/26/技术/Flask/flask-uwsgi-deployment/</id>
    <published>2018-12-26T14:23:56.000Z</published>
    <updated>2018-12-26T14:23:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前的Flask应用都是直接用自带的server跑的，本身业务对性能也没什么要求，就没做<code>production</code>的部署。但是最近觉得很麻烦的是，每次<code>server</code>端代码改变，都得跑去服务器上<code>pull</code>代码，然后重启<code>flask server</code>，太麻烦了，还是弄成自动部署方便多了。</p><a id="more"></a><h2 id="安装uwsgi"><a href="#安装uwsgi" class="headerlink" title="安装uwsgi"></a>安装<code>uwsgi</code></h2><p>我这边服务器系统是<code>ubuntu 16.04</code>的，仓库里本身有<code>uwsgi</code>包，除了安装<code>uwsgi</code>之外，我们还需要安装对应的<code>python</code>插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install uwsgi</span><br><span class="line"><span class="comment"># 如果你使用的python是2.x版本的话，就安装uwsgi-plugin-python</span></span><br><span class="line">sudo apt install uwsgi-plugin-python3</span><br></pre></td></tr></table></figure><p>安装<code>uwsig-plugin-python3</code>的过程中会出现下面错误</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/var/lib/dpkg/info/uwsgi-plugin-python3.postinst: 61: [: Illegal number:</span><br></pre></td></tr></table></figure><p>修改下对应文件<code>uwsig-plugin-python3.postinst</code>中60行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -c &apos;/uwsgi_python3$&apos; | true =&gt; grep -c &apos;/uwsgi_python3$&apos; || true</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="uwsgi作为服务启动"><a href="#uwsgi作为服务启动" class="headerlink" title="uwsgi作为服务启动"></a>uwsgi作为服务启动</h3><p>在<code>ubuntu 16.04</code>系统下，使用<code>systemd</code>来管理服务启动，其他系统参考对应<a href="https://uwsgi-docs.readthedocs.io/en/latest/Management.html" target="_blank" rel="noopener">文档</a>吧</p><h3 id="禁止LSB启动"><a href="#禁止LSB启动" class="headerlink" title="禁止LSB启动"></a>禁止<code>LSB</code>启动</h3><p><code>apt</code>安装后，<code>uwsgi</code>会在<code>init.d</code>目录下有个<code>uwsgi</code>文件，这个对应着<code>LSB</code>服务启动方式，<code>Systemd</code>兼容<code>LSB</code>方式，因为准备使用<code>Systemd</code>方式来管理，所以先要将<code>LSB</code>中<code>uwsgi</code>服务禁用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-rd.d uwsgi remove</span><br></pre></td></tr></table></figure><h3 id="配置service文件"><a href="#配置service文件" class="headerlink" title="配置service文件"></a>配置service文件</h3><p>目录<code>/lib/systemd/system</code>下创建<code>emperor.uwsgi.service</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=uWSGI Emperor</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/uwsgi --ini /etc/uwsgi/emperor.ini</span><br><span class="line"># Requires systemd version 211 or newer</span><br><span class="line">RuntimeDirectory=uwsgi</span><br><span class="line">Restart=always</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">Type=notify</span><br><span class="line">StandardError=syslog</span><br><span class="line">NotifyAccess=all</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="激活服务"><a href="#激活服务" class="headerlink" title="激活服务"></a>激活服务</h3><p>新增service文件后，需要进行下面操作才能让<code>systemd</code>将服务管理起来</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemd自身reload，这样才能发现新增的service文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 确认systemd发现了service文件</span></span><br><span class="line">sudo systemctl list-unit-files | grep emp</span><br><span class="line"><span class="comment"># 激活service</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> emperor.uwsgi.service</span><br><span class="line"><span class="comment"># 启动service</span></span><br><span class="line">sudo systemctl start emperor.uwsgi.service</span><br><span class="line"><span class="comment"># 查下下服务启动状态，确认正常启动</span></span><br><span class="line">sudo systemctl status emperor.uwsig.service</span><br></pre></td></tr></table></figure><h2 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h2><p>这里举例部署一个测试应用</p><p>首先在<code>/etc/uwsgi/vassals</code>下新建<code>test_app.ini</code>文件，内容如下</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">chdir</span>=/home/pzx/projects/meson-webviewer-server</span><br><span class="line"><span class="comment">; http-to=/tmp/%n.sock</span></span><br><span class="line"><span class="attr">http-socket</span>=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8376</span></span><br><span class="line"><span class="attr">plugin</span>=python35</span><br><span class="line"><span class="attr">module</span>=test_app:app</span><br><span class="line"><span class="attr">processes</span>=<span class="number">4</span></span><br><span class="line"><span class="attr">master</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">;python虚拟环境</span></span><br><span class="line"><span class="attr">venv</span>=/home/pzx/projects/meson-webviewer-server/.venv</span><br></pre></td></tr></table></figure><p>对应<code>/home/pzx/projects/meson-webviewer-server/test_app.py</code>文件内容如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World! i am app1"</span></span><br></pre></td></tr></table></figure><p>访问<code>http://ip:8376</code>就会在页面上看到<code>Hello world! i am app1</code></p><h2 id="配合gitlab-ci"><a href="#配合gitlab-ci" class="headerlink" title="配合gitlab-ci"></a>配合<code>gitlab-ci</code></h2><p>下面是<code>.gitlab-ci.yml</code>的示例</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="attr">  GIT_SUBMODULE_STRATEGY:</span> <span class="string">recursive</span></span><br><span class="line"></span><br><span class="line"><span class="string">deploy</span> <span class="attr">tools:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">linux-runner</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cp</span> <span class="bullet">-rf</span> <span class="string">*</span> <span class="string">/home/gitlab-runner/meson/meson-webviewer-server</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">/home/gitlab-runner/meson/meson-webviewer-server</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">source</span> <span class="string">.venv/bin/activate</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">pip</span> <span class="string">install</span> <span class="bullet">-r</span> <span class="string">pyrequirements.txt</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sudo</span> <span class="string">touch</span> <span class="string">/etc/uwsgi/vassals/meson-webviewer-server.ini</span></span><br></pre></td></tr></table></figure><p>最重要的语句就是最后一句<code>touch</code>了，会导致配置文件时间戳的更新，进而<code>uwsgi</code>会自动重启对应应用。</p><p>这样以后在代码<code>push</code>到远端后，对应应用的服务端会自动更新重启，再也不需要跑到服务器上手动更新重启了，真Happy!</p><h2 id="Emperor方式"><a href="#Emperor方式" class="headerlink" title="Emperor方式"></a>Emperor方式</h2><p>上面<code>uwsgi</code>用的部署方式是<code>Emperor</code>方式(一个服务管理多个应用)，<code>Emperor</code>是君王的意思，<code>vassals</code>是臣子的意思。君王管理所有的臣子，臣子就是具体部署的应用，来处理用户的请求。需要部署多个应用，就在<code>/etc/uwsgi/vassals</code>目录下创建新的应用的配置文件，君王会自动方式新的配置文件，然后按照配置文件的配置去启动对应的应用。</p><p>君王不关有自动发现臣子(新应用配置)的能力，同时君王会在应用配置有更新的时候，优雅的重启臣子(旧的worker处理完请求后关闭，同时启动新的worker)；另外还包括负载均衡、挂掉重启等功能，简直完美的解决了自动部署的问题</p><p>另外<code>uwsgi</code>也支持一个应用一个服务的配置方式，这种适合一个机器就只跑一个应用的情况，具体配置可以参考<a href="https://uwsgi-docs.readthedocs.io/en/latest/Systemd.html#one-service-per-app-in-systemd" target="_blank" rel="noopener">文档</a></p><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p><code>flask</code>的部署方式有很多，但是我不想弄复杂，再搞个<code>Nginx</code>在前面。 <code>uwsgi</code>不关支持请求的转发，同时还支持静态文件服务，对于一个简单的应用妥妥的够了，不想再耗费精力去部署的复杂（也没有什么用）</p><p>但是<code>uwsgi</code>的文档真的写的太乱了，好多东西都不知道去哪里查，要试验好久才能配置正确！比如关于http端口的绑定，需要用到<code>http-socket</code>选项，但是在文档里找不到对应说明，还有关于<code>python</code>插件的配置等等。</p><p>清楚的文档还是很重要的，要不然以后有其他选择了，妥妥的不用这个了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的Flask应用都是直接用自带的server跑的，本身业务对性能也没什么要求，就没做&lt;code&gt;production&lt;/code&gt;的部署。但是最近觉得很麻烦的是，每次&lt;code&gt;server&lt;/code&gt;端代码改变，都得跑去服务器上&lt;code&gt;pull&lt;/code&gt;代码，然后重启&lt;code&gt;flask server&lt;/code&gt;，太麻烦了，还是弄成自动部署方便多了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Flask" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/Flask/"/>
    
    
      <category term="flask" scheme="http://blog.pzxbc.com/tags/flask/"/>
    
      <category term="uwsgi" scheme="http://blog.pzxbc.com/tags/uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3-NvidiaShieldTV2017性能对比</title>
    <link href="http://blog.pzxbc.com/2018/12/07/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/pi3-nvidiashieldtv2017-compare/"/>
    <id>http://blog.pzxbc.com/2018/12/07/技术/硬件相关/pi3-nvidiashieldtv2017-compare/</id>
    <published>2018-12-07T13:20:01.000Z</published>
    <updated>2018-12-18T13:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>更新：之前<code>Nvidia Shield TV</code>中安装的<code>Python</code>是<code>armv7</code>版本，更新为<code>aarch64</code>版本后，居然快比<code>armv7</code>版本快3倍！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ # python3 -OO bench.py</span><br><span class="line">4.9053307790309191 4.9530157269909978 4.9775087489979342</span><br></pre></td></tr></table></figure><p>上述脚本在<code>armv7</code>版本下结果是15秒。说明<code>aarch64</code>相比于<code>armv7</code>架构性能提升是巨大的。</p><a id="more"></a><hr><p>两者<code>bench</code>软件都是<code>armv7</code>版本的情况</p><p>找了两个benchmark的脚本，纯计算的话<code>NvidiaShieldTV2017</code>大概比<code>Pi3</code>快25%，综合的话大概是<code>Pi3</code>性能的两倍。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><h3 id="Benchmarker测试"><a href="#Benchmarker测试" class="headerlink" title="Benchmarker测试"></a><a href="https://pypi.org/project/Benchmarker/" target="_blank" rel="noopener"><code>Benchmarker</code></a>测试</h3><p><strong>Pi3</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@pi3:~/work $ python3 example.py -o result.json</span><br><span class="line">## benchmarker:         release 4.0.1 (for python)</span><br><span class="line">## python version:      3.5.3</span><br><span class="line">## python compiler:     GCC 6.3.0 20170124</span><br><span class="line">## python platform:     Linux-4.9.59-v7+-armv7l-with-debian-9.1</span><br><span class="line">## python executable:   /usr/bin/python3</span><br><span class="line">## cpu model:           ARMv7 Processor rev 4 (v7l)</span><br><span class="line">## parameters:          loop=1000000, cycle=1, extra=0</span><br><span class="line"></span><br><span class="line">##                        real    (total    = user    + sys)</span><br><span class="line">(Empty)                 0.2927    0.3000    0.2900    0.0100</span><br><span class="line">join                    2.6950    2.6800    2.6900   -0.0100</span><br><span class="line">concat                  2.8989    2.8900    2.9000   -0.0100</span><br><span class="line">format                  3.2807    3.2700    3.2800   -0.0100</span><br><span class="line"></span><br><span class="line">## Ranking                real</span><br><span class="line">join                    2.6950  (100.0) ********************</span><br><span class="line">concat                  2.8989  ( 93.0) *******************</span><br><span class="line">format                  3.2807  ( 82.1) ****************</span><br><span class="line"></span><br><span class="line">## Matrix                 real    [01]    [02]    [03]</span><br><span class="line">[01] join               2.6950   100.0   107.6   121.7</span><br><span class="line">[02] concat             2.8989    93.0   100.0   113.2</span><br><span class="line">[03] format             3.2807    82.1    88.4   100.0</span><br></pre></td></tr></table></figure><p><strong>Nvidia Shield TV 2017</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">darcy:/mnt/media_rw/5C58-53F6/projects # python3 example.py -o result.json</span><br><span class="line">## benchmarker:         release 4.0.1 (for python)</span><br><span class="line">## python version:      3.7.0</span><br><span class="line">## python compiler:     GCC 7.3.0</span><br><span class="line">## python platform:     Linux-3.10.96-tegra-armv8l-with-glibc2.4</span><br><span class="line">## python executable:   /opt/bin/python3</span><br><span class="line">## cpu model:           -</span><br><span class="line">## parameters:          loop=1000000, cycle=1, extra=0</span><br><span class="line"></span><br><span class="line">##                        real    (total    = user    + sys)</span><br><span class="line">(Empty)                 0.1663    0.1500    0.1500    0.0000</span><br><span class="line">join                    1.0292    0.9700    0.9600    0.0100</span><br><span class="line">concat                  1.2687    1.2200    1.1900    0.0300</span><br><span class="line">format                  1.4104    1.4300    1.4300    0.0000</span><br><span class="line"></span><br><span class="line">## Ranking                real</span><br><span class="line">join                    1.0292  (100.0) ********************</span><br><span class="line">concat                  1.2687  ( 81.1) ****************</span><br><span class="line">format                  1.4104  ( 73.0) ***************</span><br><span class="line"></span><br><span class="line">## Matrix                 real    [01]    [02]    [03]</span><br><span class="line">[01] join               1.0292   100.0   123.3   137.0</span><br><span class="line">[02] concat             1.2687    81.1   100.0   111.2</span><br><span class="line">[03] format             1.4104    73.0    90.0   100.0</span><br></pre></td></tr></table></figure><h3 id="SimpleCal"><a href="#SimpleCal" class="headerlink" title="SimpleCal"></a><a href="https://gist.github.com/apalala/3fbbeb5305584d2abe05" target="_blank" rel="noopener">SimpleCal</a></h3><p><strong>Pi3</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@pi3:~/work $ python3 -OO bench.py</span><br><span class="line">19.282189759076573 19.284519216045737 19.288226678036153</span><br></pre></td></tr></table></figure><p><strong>Nvidia Shield TV 2017</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">130|darcy:/mnt/media_rw/5C58-53F6/projects # python3 -OO bench.py</span><br><span class="line">15.1511479630135 15.185968587989919 15.258197338087484</span><br></pre></td></tr></table></figure><h2 id="CPU硬件"><a href="#CPU硬件" class="headerlink" title="CPU硬件"></a>CPU硬件</h2><p>两个设备都是4核的</p><h3 id="Pi3"><a href="#Pi3" class="headerlink" title="Pi3"></a>Pi3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@pi3:~/work $ cat /proc/cpuinfo</span><br><span class="line">processor: 0</span><br><span class="line">model name: ARMv7 Processor rev 4 (v7l)</span><br><span class="line">BogoMIPS: 38.40</span><br><span class="line">Features: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32</span><br><span class="line">CPU implementer: 0x41</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant: 0x0</span><br><span class="line">CPU part: 0xd03</span><br><span class="line">CPU revision: 4</span><br><span class="line"></span><br><span class="line">processor: 1</span><br><span class="line">model name: ARMv7 Processor rev 4 (v7l)</span><br><span class="line">BogoMIPS: 38.40</span><br><span class="line">Features: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32</span><br><span class="line">CPU implementer: 0x41</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant: 0x0</span><br><span class="line">CPU part: 0xd03</span><br><span class="line">CPU revision: 4</span><br><span class="line"></span><br><span class="line">processor: 2</span><br><span class="line">model name: ARMv7 Processor rev 4 (v7l)</span><br><span class="line">BogoMIPS: 38.40</span><br><span class="line">Features: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32</span><br><span class="line">CPU implementer: 0x41</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant: 0x0</span><br><span class="line">CPU part: 0xd03</span><br><span class="line">CPU revision: 4</span><br><span class="line"></span><br><span class="line">processor: 3</span><br><span class="line">model name: ARMv7 Processor rev 4 (v7l)</span><br><span class="line">BogoMIPS: 38.40</span><br><span class="line">Features: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32</span><br><span class="line">CPU implementer: 0x41</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant: 0x0</span><br><span class="line">CPU part: 0xd03</span><br><span class="line">CPU revision: 4</span><br><span class="line"></span><br><span class="line">Hardware: BCM2835</span><br><span class="line">Revision: a22082</span><br><span class="line">Serial: 000000002e84fae0</span><br></pre></td></tr></table></figure><h3 id="Nvidia-Shield-TV-2017"><a href="#Nvidia-Shield-TV-2017" class="headerlink" title="Nvidia Shield TV 2017"></a>Nvidia Shield TV 2017</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">darcy:/mnt/media_rw/5C58-53F6/projects # cat /proc/cpuinfo</span><br><span class="line">processor: 0</span><br><span class="line">BogoMIPS: 38.40</span><br><span class="line">Features: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt</span><br><span class="line">CPU implementer: 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant: 0x1</span><br><span class="line">CPU part: 0xd07</span><br><span class="line">CPU revision: 1</span><br><span class="line"></span><br><span class="line">processor: 1</span><br><span class="line">BogoMIPS: 38.40</span><br><span class="line">Features: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt</span><br><span class="line">CPU implementer: 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant: 0x1</span><br><span class="line">CPU part: 0xd07</span><br><span class="line">CPU revision: 1</span><br><span class="line"></span><br><span class="line">processor: 2</span><br><span class="line">BogoMIPS: 38.40</span><br><span class="line">Features: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt</span><br><span class="line">CPU implementer: 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant: 0x1</span><br><span class="line">CPU part: 0xd07</span><br><span class="line">CPU revision: 1</span><br><span class="line"></span><br><span class="line">processor: 3</span><br><span class="line">BogoMIPS: 38.40</span><br><span class="line">Features: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt</span><br><span class="line">CPU implementer: 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant: 0x1</span><br><span class="line">CPU part: 0xd07</span><br><span class="line">CPU revision: 1</span><br><span class="line"></span><br><span class="line">Hardware: darcy</span><br><span class="line">Revision: 0000</span><br><span class="line">Serial: 0b4e0000a0000000</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更新：之前&lt;code&gt;Nvidia Shield TV&lt;/code&gt;中安装的&lt;code&gt;Python&lt;/code&gt;是&lt;code&gt;armv7&lt;/code&gt;版本，更新为&lt;code&gt;aarch64&lt;/code&gt;版本后，居然快比&lt;code&gt;armv7&lt;/code&gt;版本快3倍！&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~ # python3 -OO bench.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.9053307790309191 4.9530157269909978 4.9775087489979342&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述脚本在&lt;code&gt;armv7&lt;/code&gt;版本下结果是15秒。说明&lt;code&gt;aarch64&lt;/code&gt;相比于&lt;code&gt;armv7&lt;/code&gt;架构性能提升是巨大的。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="硬件相关" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="raspberry pi3" scheme="http://blog.pzxbc.com/tags/raspberry-pi3/"/>
    
      <category term="nvidia shield tv 2017" scheme="http://blog.pzxbc.com/tags/nvidia-shield-tv-2017/"/>
    
      <category term="benchmark" scheme="http://blog.pzxbc.com/tags/benchmark/"/>
    
  </entry>
  
  <entry>
    <title>从Vim迁移到NeoVim</title>
    <link href="http://blog.pzxbc.com/2018/12/03/%E6%8A%80%E6%9C%AF/%E9%9A%8F%E6%89%8B%E8%AE%B0/moving-vim-to-neovim/"/>
    <id>http://blog.pzxbc.com/2018/12/03/技术/随手记/moving-vim-to-neovim/</id>
    <published>2018-12-03T13:20:01.000Z</published>
    <updated>2018-12-03T13:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Vim</code>使用了也有四年时间了，作为一款编辑器，确实是很方便，已经习惯于只使用键盘操作。主要的应用场景在与服务端编程，<code>SSH</code>连接服务器后，直接就可以<code>Vim</code>编辑源码了。</p><p><code>Vim</code>主要写<code>Python</code>代码，使用<code>jedi-vim</code>插件，但是不支持虚拟环境。</p><p>nvim的配置文件</p><p><a href="https://neovim.io/doc/user/nvim.html#nvim-from-vim" target="_blank" rel="noopener">nvim参考文件nvim-from-vim</a></p><ol><li><p>To start the transition, create your |init.vim| (user config) file:</p><p> :call mkdir(stdpath(‘config’), ‘p’)<br> :exe ‘edit ‘.stdpath(‘config’).’/init.vim’</p></li><li><p>Add these contents to the file:</p><p> set runtimepath^=~/.vim runtimepath+=~/.vim/after<br> let &amp;packpath = &amp;runtimepath<br> source ~/.vimrc</p></li><li><p>Restart Nvim, your existing Vim config will be loaded.</p></li></ol><p>使用Python</p><p>nvim中的python不想vim中那样直接编译到了vim种，nvim通过远程调用的方式来使用，可以使用系统中安装好的python</p><p>配置<br><a href="https://neovim.io/doc/user/provider.html#provider-python" target="_blank" rel="noopener">https://neovim.io/doc/user/provider.html#provider-python</a></p><p>先创建一个虚拟环境专门用于暗转pynvim</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3.5 -m venv py35nvim</span><br><span class="line"><span class="built_in">source</span> py35nvim/bin/activate</span><br><span class="line">pip install pynvim</span><br></pre></td></tr></table></figure><p>配置python开发</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> py35nvim/bin/activate</span><br><span class="line">pip install jedi</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">'nvim'</span>)</span><br><span class="line">    Plug <span class="string">'Shougo/deoplete.nvim'</span>, &#123; <span class="string">'do'</span>: <span class="string">':UpdateRemotePlugins'</span> &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    Plug <span class="string">'Shougo/deoplete.nvim'</span></span><br><span class="line">    Plug <span class="string">'roxma/nvim-yarp'</span></span><br><span class="line">    Plug <span class="string">'roxma/vim-hug-neovim-rpc'</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:deoplete</span>#enable_at_startup = <span class="number">1</span></span><br><span class="line"><span class="comment">" Python 编程</span></span><br><span class="line">Plug <span class="string">'zchee/deoplete-jedi'</span></span><br></pre></td></tr></table></figure><p>nvim-from-vim<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:help nvim-from-vim</span><br></pre></td></tr></table></figure></p><p><code>~/.config/nvim/init.vim</code></p><p>bash_alias中添加别名<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> nvim=vim</span><br></pre></td></tr></table></figure></p><p>主题</p><p>使用真彩色<br><a href="https://lotabout.me/2018/true-color-for-tmux-and-vim/" target="_blank" rel="noopener">https://lotabout.me/2018/true-color-for-tmux-and-vim/</a></p><ol><li>配置tmux</li><li>验证终端是否支持24真彩色</li></ol><p>iterm2 需要可以设置<code>terminal type</code></p><p>字体安装<br>brew tap caskroom/fonts<br>brew cask install font-fantasquesansmono-nerd-font-mono</p><p>主题使用<br>Plug ‘drewtempelmeyer/palenight.vim’<br>Plug ‘itchyny/lightline.vim’</p><p>状态栏使用 lighline</p><p>vim使用图标<br><a href="https://github.com/ryanoasis/vim-devicons" target="_blank" rel="noopener">https://github.com/ryanoasis/vim-devicons</a></p><p>需要patch的字体，<br>参考<a href="https://github.com/ryanoasis/nerd-fonts#option-8-patch-your-own-font" target="_blank" rel="noopener">https://github.com/ryanoasis/nerd-fonts#option-8-patch-your-own-font</a><br>patch字体</p><p>参考</p><ol><li><a href="https://blog.pabuisson.com/2018/06/favorite-color-schemes-modern-vim-neovim/" target="_blank" rel="noopener">https://blog.pabuisson.com/2018/06/favorite-color-schemes-modern-vim-neovim/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Vim&lt;/code&gt;使用了也有四年时间了，作为一款编辑器，确实是很方便，已经习惯于只使用键盘操作。主要的应用场景在与服务端编程，&lt;code&gt;SSH&lt;/code&gt;连接服务器后，直接就可以&lt;code&gt;Vim&lt;/code&gt;编辑源码了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vim
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="随手记" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="Vim" scheme="http://blog.pzxbc.com/tags/Vim/"/>
    
      <category term="NeoVim" scheme="http://blog.pzxbc.com/tags/NeoVim/"/>
    
  </entry>
  
  <entry>
    <title>初识Celery</title>
    <link href="http://blog.pzxbc.com/2018/11/22/%E6%8A%80%E6%9C%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/introduction-to-celery/"/>
    <id>http://blog.pzxbc.com/2018/11/22/技术/分布式任务队列/introduction-to-celery/</id>
    <published>2018-11-22T02:22:36.000Z</published>
    <updated>2018-11-22T02:22:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发的过程中，我们或多或少都会开发一些小的程序，比如下载数据、清理数据、发送邮件等等。程序写完后，我们会将它们部署到特定的机器上去运行，有些需要在Linux机器上跑，有些又需要在Windows机器上面跑。需要定时的话就在任务计划中添加一个计划，每个程序运行的结果都可以自己写入相应的日志文件中。这样的解决方案对于少数的任务来说足够了，如果任务数量变多了，我们就会被下面的任务困扰</p><ol><li>任务非常多，单机性能有限，怎么自动分布到不同的机器上去运行</li><li>方便的获取任务运行的结果</li><li>有效的监控运行的任务</li></ol><a id="more"></a><p>任务是多样性的，不同的任务可能大部分内容都需要从头写，但是上面提到的问题其实都是关于任务管理方便的，应该可以做成通用的解决方案。在搜索学习后，发现了<code>分布式任务队列</code>这样一个概念以及开源项目<code>Celery</code>。</p><h2 id="Celery介绍"><a href="#Celery介绍" class="headerlink" title="Celery介绍"></a>Celery介绍</h2><p><code>Celery</code>系统内部通信通过消息队列来进行，解耦了用户和执行者。用户在消息队列中添加一个消息就会发起一个任务，消息中间件将消息传递给执行者，执行者就会运行对应的程序。</p><p>一个<code>Celery</code>系统由多个执行者和消息队列组成，这样一个架构有着高可用行以及水平扩展能力。</p><p><code>Celery</code>系统有<code>Python</code>编写，但是其使用的通信协议却可以使用任意语言实现，包括<code>HTTP</code>调用。</p><h2 id="Celery安装"><a href="#Celery安装" class="headerlink" title="Celery安装"></a>Celery安装</h2><p><code>Celery</code>的安装非常简单，通过<code>pip</code>命令就能够安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install celery</span><br></pre></td></tr></table></figure><p><code>Celery</code>依赖消息队列，因此还需要安装消息中间件，建议安装推荐的<code>RabbitMQ</code>，安装指引可以看<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发的过程中，我们或多或少都会开发一些小的程序，比如下载数据、清理数据、发送邮件等等。程序写完后，我们会将它们部署到特定的机器上去运行，有些需要在Linux机器上跑，有些又需要在Windows机器上面跑。需要定时的话就在任务计划中添加一个计划，每个程序运行的结果都可以自己写入相应的日志文件中。这样的解决方案对于少数的任务来说足够了，如果任务数量变多了，我们就会被下面的任务困扰&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任务非常多，单机性能有限，怎么自动分布到不同的机器上去运行&lt;/li&gt;
&lt;li&gt;方便的获取任务运行的结果&lt;/li&gt;
&lt;li&gt;有效的监控运行的任务&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="分布式任务队列" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/"/>
    
    
      <category term="Celery" scheme="http://blog.pzxbc.com/tags/Celery/"/>
    
      <category term="分布式任务队列" scheme="http://blog.pzxbc.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>2018-11-16-周度总结</title>
    <link href="http://blog.pzxbc.com/2018/11/16/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2018-11-16-summary/"/>
    <id>http://blog.pzxbc.com/2018/11/16/技术/每周整理/2018-11-16-summary/</id>
    <published>2018-11-16T06:32:38.000Z</published>
    <updated>2018-11-16T06:32:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>这周做任务的时候老是遇到各种难以解决的小问题，都折腾了很久的，导致东西没做多少。。。</p><h2 id="Gitlab-Runner"><a href="#Gitlab-Runner" class="headerlink" title="Gitlab-Runner"></a>Gitlab-Runner</h2><p>需要在Windows服务器上部署一个应用，恰好上面也跑了<code>gitlab-runner</code>，所以直接在项目的<code>.gitlab-ci.yml</code>配置了部署脚本。本想着一切挺完美的，每次<code>push</code>后，新文件自动复制，然后重启应用！</p><a id="more"></a><p>在<code>.gitlab-ci.yml</code>中的<code>script</code>有调用<code>start xx.bat</code>脚本的语句来重启应用，结果<code>gitlab-runner</code>每次运行到调用<code>bat</code>的语句的时候就卡住了，但是应用好像是重启了。。。但是<code>gitlab-runner</code>挂了啊，后续的<code>ci/cd</code>任务都没办法继续了，具体挂掉的原因没有具体的定位到，猜测是因为<code>gitlab-runner</code>调用<code>bat</code>的时候是使用<code>start /k</code>命令有关，曲线救国，最后<code>script</code>调用<code>py</code>脚本来启动应用</p><p>另外一个问题，<code>gitlab-runner</code>是以系统服务运行的，所以<code>script</code>中运行命令启动应用是没办法创建窗口的(<code>system</code>用户运行的环境中没有窗口服务)，而且应用运行的身份是<code>system</code>，所以如果真要在<code>windows</code>上做自动部署，正确的办法是通过远程桌面登录需要部署的机器，然后部署应用</p><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p>近日想通过VPN连接家中的网络来访问<code>Goolge</code>等服务，之前都是使用<code>SSH隧道</code>来进行代理访问，这种针对网页端的访还比较方便，但是对于某个应用想走代理就没那么方便了。因此决定尝试使用家里之前就配置好的<code>VPN</code>服务(用于外出给手机上网^-^)。在使用中遇到了两个问题。</p><blockquote><p>连上了<code>VPN</code>后，我所有的访问请求都会通过我家的网络转发，但是公司内部有些服务还是需要访问的，怎么办呢？</p></blockquote><p>在Windows10的VPN设置中有个代理的设置，设置好你不想走<code>VPN</code>链接的网络地址就行</p><img src="/2018/11/16/技术/每周整理/2018-11-16-summary/vpn-setting.png"><blockquote><p>连接了VPN后，网页端居然不能google访问，但是应用却又可以代理</p></blockquote><p>这种网页端不能访问，应用可以访问的，按经验肯定是<code>DNS</code>有问题。于是看了dns解析</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nslookup www.google.com</span><br></pre></td></tr></table></figure><p>果然走的还是本地连接的DNS服务器解析，但是为什么了，按道理默认的行为应该是需要走我<code>VPN</code>连接中分配的DNS服务器去解析。查了一圈后，终于找到了问题所在，原来跟<code>IPv6</code>有关。。。具体为什么有这么个奇葩的关联，我也没有深究了，有兴趣的可以去看看这里面的<a href="https://answers.microsoft.com/en-us/windows/forum/windows_10-networking/win-10-dns-resolution-of-remote-network-via-vpn/513bdeea-0d18-462e-9ec3-a41129eec736" target="_blank" rel="noopener">评论</a>。所以解决方法就是将本地连接里的<code>IPv6</code>协议禁止掉就行了！</p><p>禁止了<code>IPv6</code>协议后，果然网页端可以访问<code>Google</code>服务了。但是居然<code>Android</code>虚拟机还是不行，这又是为啥呢！模拟器中的浏览器在访问<code>Google</code>时提示证书错误<code>ERR_CERT_COMMON_NAME_INVALID</code>，然后随手点了下证书信息，What a fuck，居然是<code>Facebook</code>的证书。。。那就应该还是有<code>DNS</code>污染，所以才解析到了<code>Facebook</code>去了。无奈重启了下虚拟机，叮咚一切正常了，原来是虚拟机中的<code>DNS</code>信息没有刷新！</p><p>查资料的时候，发现了另外一个常见的需求：连接<code>VPN</code>后，我大部分的网络连接还是希望走本地网络链接，只有部分服务才需要走<code>VPN</code>通道。 看了下解决方案好像是叫做<code>split tunneling</code>，有需求的可以自己去搜搜看</p><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p>使用VScode调试时，打印<code>pandas</code>中的<code>dataframe</code>结构，输出的结构很不友好。输出中本身带有换行符，但是在调试终端中只是原原本本的显示了个<code>\n</code>符号，而不会替你换行。之前有尝试过<code>PyCharm</code>调试，它打印输出的<code>dataframe</code>结构就是格式化后的样子，一个矩阵列表。查了下原来在调试配置中添加下面配置就行</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"console": "externalTerminal"</span><br></pre></td></tr></table></figure><p>之后在调试终端中使用<code>print(data_frame)</code>就会看到可读的输出了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周做任务的时候老是遇到各种难以解决的小问题，都折腾了很久的，导致东西没做多少。。。&lt;/p&gt;
&lt;h2 id=&quot;Gitlab-Runner&quot;&gt;&lt;a href=&quot;#Gitlab-Runner&quot; class=&quot;headerlink&quot; title=&quot;Gitlab-Runner&quot;&gt;&lt;/a&gt;Gitlab-Runner&lt;/h2&gt;&lt;p&gt;需要在Windows服务器上部署一个应用，恰好上面也跑了&lt;code&gt;gitlab-runner&lt;/code&gt;，所以直接在项目的&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;配置了部署脚本。本想着一切挺完美的，每次&lt;code&gt;push&lt;/code&gt;后，新文件自动复制，然后重启应用！&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="每周整理" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/"/>
    
    
      <category term="gitlab" scheme="http://blog.pzxbc.com/tags/gitlab/"/>
    
      <category term="gitlab-runner" scheme="http://blog.pzxbc.com/tags/gitlab-runner/"/>
    
      <category term="VPN" scheme="http://blog.pzxbc.com/tags/VPN/"/>
    
      <category term="VScode" scheme="http://blog.pzxbc.com/tags/VScode/"/>
    
      <category term="Pandas" scheme="http://blog.pzxbc.com/tags/Pandas/"/>
    
      <category term="DataFrame" scheme="http://blog.pzxbc.com/tags/DataFrame/"/>
    
  </entry>
  
  <entry>
    <title>2018-11-09周度</title>
    <link href="http://blog.pzxbc.com/2018/11/09/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/2018-11-09-summary/"/>
    <id>http://blog.pzxbc.com/2018/11/09/技术/每周整理/2018-11-09-summary/</id>
    <published>2018-11-09T15:17:34.000Z</published>
    <updated>2018-11-09T15:17:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>这周工作任务主要有：</p><ol><li>公司内部<code>git</code>使用的培训</li><li>博客重新整理</li><li>交易系统网页端启动技术方案研究</li></ol><a id="more"></a><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="查看公钥指纹-fingerprint"><a href="#查看公钥指纹-fingerprint" class="headerlink" title="查看公钥指纹(fingerprint)"></a>查看公钥指纹(fingerprint)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -lf ~/.ssh/id_rsa.pub</span><br><span class="line">1024 SHA256:19n6fkdz0qqmowiBy6XEaA87EuG/jgWUr44ZSBhJl6Y (DSA)</span><br></pre></td></tr></table></figure><p>新的<code>ssh-keygen</code>命令默认会将指纹显示为<code>SHA256</code>信息，如果想查看旧的<code>MD5</code>指纹信息，需要指定</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -E md5 -lf ~/.ssh/id_rsa.pub</span><br><span class="line">2048 MD5:4d:5b:97:19:8c:fe:06:f0:29:e7:f5:96:77:cb:3c:71 (DSA)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://stackoverflow.com/questions/9607295/how-do-i-find-my-rsa-key-fingerprint" target="_blank" rel="noopener">how-do-i-find-my-rsa-key-fingerprint</a></p></blockquote><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="文章分目录问题"><a href="#文章分目录问题" class="headerlink" title="文章分目录问题"></a>文章分目录问题</h3><p>原来一直以为hexo的文章都必须放在<code>_posts</code>目录下面，时间一久发现该目录下文件数已经变得好多了。心想能不能在<code>_posts</code>目录下按照文章分类建立对应文件夹进行存放，网上查了一圈也没有人说过这个问题，然后自己建了个文件夹测试了下，原来<code>hexo</code>本来就支持<code>_post</code>下再建目录，它会递归查找<code>.md</code>文件的。。。</p><p>另外找了一个插件<a href="https://github.com/zthxxx/hexo-directory-category" target="_blank" rel="noopener">hexo-directory-category</a>，它会根据文章在<code>_post</code>中目录自动为文章添加<code>categories</code>信息，这样写文章时又可以少填点头信息了。</p><p><code>hexo</code>的<code>new</code>命令默认创建的文章时在<code>_post</code>目录下的，可以通过<code>-p</code>选项指定文章的创建路径，这样就可以直接将文章创建在某个目录下面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 文章标题 -p 技术/文件名.md</span><br></pre></td></tr></table></figure><h2 id="Npm"><a href="#Npm" class="headerlink" title="Npm"></a>Npm</h2><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p><code>package.json</code>中依赖的库的版本前面有些有<code>^</code>符号，有些有<code>~</code>符号，有些没有任何前缀符号。不同的表示其实代表着对库的版本有着不同的要求</p><p>不带任何前缀： 精确匹配这个版本<br><code>^</code>： 匹配主版本相同的最新版本。如<code>^1.2.0</code>会匹配任何<code>1.x.x</code>版本，但是不会匹配<code>2.0.0</code>版本</p><p><code>~</code>： 匹配次版本相同的最新版本。如<code>~1.2.3</code>会匹配任何<code>1.2.x</code>版本，但是不会匹配<code>1.3.0</code>版本</p><p>关于版本的表示还有很多种，其他表示都比较容易猜出是什么意思，其他具体的表示方法，参看<a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">package.json中的dependencies</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周工作任务主要有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;公司内部&lt;code&gt;git&lt;/code&gt;使用的培训&lt;/li&gt;
&lt;li&gt;博客重新整理&lt;/li&gt;
&lt;li&gt;交易系统网页端启动技术方案研究&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="每周整理" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%AF%8F%E5%91%A8%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Hexo" scheme="http://blog.pzxbc.com/tags/Hexo/"/>
    
      <category term="git" scheme="http://blog.pzxbc.com/tags/git/"/>
    
      <category term="npm" scheme="http://blog.pzxbc.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Python解析邮件附件乱码</title>
    <link href="http://blog.pzxbc.com/2018/11/07/%E6%8A%80%E6%9C%AF/%E9%9A%8F%E6%89%8B%E8%AE%B0/email-attachment-encodings/"/>
    <id>http://blog.pzxbc.com/2018/11/07/技术/随手记/email-attachment-encodings/</id>
    <published>2018-11-07T15:17:34.000Z</published>
    <updated>2018-11-07T15:17:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个需求需要批量下载邮箱中某一类型邮件的附件，使用了<code>Python</code>标准库中的<code>IMAP</code>以及<code>EMAIL</code>模块。但是下载下来后总有一些附件的标题是乱码。。。了解了下邮件协议后，终于发现问题所在了。</p><a id="more"></a><p>具体关于邮件协议的分析，可以参考<a href="https://blog.csdn.net/bripengandre/article/details/2192982" target="_blank" rel="noopener">这篇文章</a>。附件在邮件中时一个<code>multipart</code>段，然后这个段中会有下面两个邮件头</p><img src="/2018/11/07/技术/随手记/email-attachment-encodings/attach1.png"><p>对应着<code>Python</code>中解析的代码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> email</span><br><span class="line"><span class="comment"># mail_data是通过IMAP协议获取的邮件数据</span></span><br><span class="line">msg = email.message_from_bytes(mail_data)</span><br><span class="line"><span class="keyword">for</span> part <span class="keyword">in</span> msg.walk():</span><br><span class="line">    filename = part.get_filename()</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        <span class="comment"># 存在附件名</span></span><br><span class="line">        header_data = email.header.decode_header(filename)</span><br><span class="line">        filename = header_data[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        encoding = header_data[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> encoding:</span><br><span class="line">            filename = filename.decode(encoding)</span><br></pre></td></tr></table></figure><p>正常来说按照上面解析邮件附件名应该没有错，但是上面这个邮件头中<code>filename</code>有些特殊，<code>filename</code>直接使用了<code>gbk</code>编码传输。<code>email</code>标准库中默认处理的编码是大概是下面这种形式，编码后所有的字符都是可打印的并且包含有原始字符的编码信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">=?GB2312?B?MjAxODEwMjW547eixMnLuczYwNbuozG6xUXWpMivzbbXyrv5vfC5wNa1se0=?=</span><br></pre></td></tr></table></figure><p>所以我们不能直接依赖<code>email</code>库中的处理方式，需要额外进行处理</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">missing = object()</span><br><span class="line"><span class="keyword">if</span> part.get_param(<span class="string">'filename'</span>, missing, <span class="string">'content-disposition'</span>) <span class="keyword">is</span> missing:</span><br><span class="line">    header = part.get(<span class="string">'content-type'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    header = part.get(<span class="string">'content-disposition'</span>)</span><br><span class="line"><span class="comment"># 'attachment;\r\n        filename="\udcc4\udcc9\udccb\udcb9\udccc\udcd8\udcd6\udcd0\udcea\udcbf\udcea\udcbb\udcd1\udcf41\udcba\udcc520181030.rar"'</span></span><br><span class="line"><span class="keyword">if</span> isinstance(header, str):</span><br><span class="line">    file_name = header</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    file_name = header._chunks[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">file_name = file_name.split()[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># filename="\udcc4\udcc9\udccb\udcb9\udccc\udcd8\udcd6\udcd0\udcea\udcbf\udcea\udcbb\udcd1\udcf41\udcba\udcc520181030.rar"</span></span><br><span class="line">file_name = file_name.split(<span class="string">'='</span>)[<span class="number">1</span>].replace(<span class="string">'"'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># \udcc4\udcc9\udccb\udcb9\udccc\udcd8\udcd6\udcd0\udcea\udcbf\udcea\udcbb\udcd1\udcf41\udcba\udcc520181030.rar</span></span><br><span class="line">file_name = file_name.encode(<span class="string">'ASCII'</span>, errors=<span class="string">'surrogateescape'</span>)</span><br><span class="line"><span class="comment"># 居然chardet将gbk检测为俄语编码了。。。</span></span><br><span class="line"><span class="comment"># 还是直接硬编码gbk吧</span></span><br><span class="line"><span class="comment"># res = chardet.detect(file_name)</span></span><br><span class="line">file_name = file_name.decode(<span class="string">'gb2312'</span>)</span><br></pre></td></tr></table></figure><p>那为什么<code>email</code>标准库不能正确处理呢？ 应该是对于8bit编码的传输方式还不支持。邮件中传输的编码默认是7bit的可打印的字符，但是近年来国内的大多数邮件服务器都已经支持8bit了，也就是可以直接支持<code>gbk</code>编码的传输。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有个需求需要批量下载邮箱中某一类型邮件的附件，使用了&lt;code&gt;Python&lt;/code&gt;标准库中的&lt;code&gt;IMAP&lt;/code&gt;以及&lt;code&gt;EMAIL&lt;/code&gt;模块。但是下载下来后总有一些附件的标题是乱码。。。了解了下邮件协议后，终于发现问题所在了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="随手记" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://blog.pzxbc.com/tags/Python/"/>
    
      <category term="邮件" scheme="http://blog.pzxbc.com/tags/%E9%82%AE%E4%BB%B6/"/>
    
      <category term="编码" scheme="http://blog.pzxbc.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件删除问题</title>
    <link href="http://blog.pzxbc.com/2018/05/31/linux-file-deletion-problem/"/>
    <id>http://blog.pzxbc.com/2018/05/31/linux-file-deletion-problem/</id>
    <published>2018-05-31T07:34:07.000Z</published>
    <updated>2018-05-31T07:34:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>有个数据服务器磁盘空间快要被占满了，使用了rm删除一些无用的大文件后，使用<code>df -h</code>查看磁盘状态，发现并没有释放空间。</p><p>经常一番查找后确认是因为被删除的文件还在被进程引用。可以通过命令<code>lsof | grep deleted</code>确认是不是这个原因，命令执行后，如果被删除的文件在命令结果列表里，那么就是该文件还在被引用。</p><p>解决方法： 关闭对应进程，释放占用的<code>fid</code></p><p>另外，这次操作的磁盘对应的文件系统是<code>LVM</code>的，了解下相关命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示磁盘信息</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="comment"># 查看LVM映射</span></span><br><span class="line">pvdisplay</span><br><span class="line">lvdisplay -a</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有个数据服务器磁盘空间快要被占满了，使用了rm删除一些无用的大文件后，使用&lt;code&gt;df -h&lt;/code&gt;查看磁盘状态，发现并没有释放空间。&lt;/p&gt;
&lt;p&gt;经常一番查找后确认是因为被删除的文件还在被进程引用。可以通过命令&lt;code&gt;lsof | grep deleted
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="随手记" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="技术" scheme="http://blog.pzxbc.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="http://blog.pzxbc.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>服务端技术开发</title>
    <link href="http://blog.pzxbc.com/2018/02/23/server-develop/"/>
    <id>http://blog.pzxbc.com/2018/02/23/server-develop/</id>
    <published>2018-02-23T07:22:26.000Z</published>
    <updated>2018-02-23T07:22:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录在服务端开发过程中使用的技术以及工具。这个页面是一个汇总页面，会不断更新。。。</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li>SSH</li><li>VIM</li><li><a href="/2016/03/30/tmux-usage">Tmux</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;记录在服务端开发过程中使用的技术以及工具。这个页面是一个汇总页面，会不断更新。。。&lt;/p&gt;
&lt;h2 id=&quot;开发工具&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务端开发" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="技术" scheme="http://blog.pzxbc.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Server" scheme="http://blog.pzxbc.com/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>rsync使用</title>
    <link href="http://blog.pzxbc.com/2017/04/06/rsync-usage/"/>
    <id>http://blog.pzxbc.com/2017/04/06/rsync-usage/</id>
    <published>2017-04-06T10:50:30.000Z</published>
    <updated>2017-04-06T10:50:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个需求想把服务器上的照片同步到电脑后，然后再使用Google Photo备份到google。想到了使用rsync来做同步。</p><p>rsync是一个类UNIX系统下的数据镜像备份工具，它的特性如下：</p><ol><li>可以镜像保存整个目录树和文件系统</li><li>可以很容易做到保持原来文件的权限、时间、软硬链接等等</li><li>无须特殊权限即可安装</li><li>优化的流程，文件传输效率高</li><li>可以使用rsh、ssh等方式来传输文件，当然也可以通过直接的socket连接</li><li>支持匿名传输</li></ol><p>在使用rsync进行远程同步时，可以使用两种方式：<strong>远程Shell方式</strong>（用户验证由ssh负责）和 <strong>C/S 方式</strong>（即客户连接远程rsync服务器，用户验证由rsync服务器负责）。</p><p>无论本地同步目录还是远程同步数据，首次运行时将会把全部文件拷贝一次，以后再运行时将只拷贝有变化的文件（对于新文件）或文件的变化部分（对于原有文件）。</p><a id="more"></a><h2 id="rsync使用"><a href="#rsync使用" class="headerlink" title="rsync使用"></a>rsync使用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -avzP [SRC] [DEST]</span><br></pre></td></tr></table></figure><p>常用选项</p><blockquote><p>-v : Verbose (try -vv for more detailed information) # 详细模式显示<br>-e “ssh options” : specify the ssh as remote shell # 指定ssh作为远程shell<br>-a : archive mode # 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD<br>-r(–recursive) : 目录递归<br>-l(–links) ：保留软链接<br>-p(–perms) ：保留文件权限<br>-t(–times) ：保留文件时间信息<br>-g(–group) ：保留属组信息<br>-o(–owner) ：保留文件属主信息<br>-D(–devices) ：保留设备文件信息<br>-z : 压缩文件<br>-h : 以可读方式输出<br>-H : 复制硬链接<br>-X : 保留扩展属性<br>-A : 保留ACL属性<br>-n : 只测试输出而不正真执行命令，推荐使用，特别防止–delete误删除！<br>–stats : 输出文件传输的状态<br>–progress : 输出文件传输的进度<br>––exclude=PATTERN : 指定排除一个不需要传输的文件匹配模式<br>––exclude-from=FILE : 从 FILE 中读取排除规则<br>––include=PATTERN : 指定需要传输的文件匹配模式<br>––include-from=FILE : 从 FILE 中读取包含规则<br>–numeric-ids : 不映射 uid/gid 到 user/group 的名字<br>-S, –sparse : 对稀疏文件进行特殊处理以节省DST的空间<br>–delete : 删除DST中SRC没有的文件，也就是所谓的镜像[mirror]备份</p></blockquote><p>对于Windows，有个<a href="https://itefix.net/content/cwrsync-free-edition" target="_blank" rel="noopener">cwRsync</a>版本</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有个需求想把服务器上的照片同步到电脑后，然后再使用Google Photo备份到google。想到了使用rsync来做同步。&lt;/p&gt;
&lt;p&gt;rsync是一个类UNIX系统下的数据镜像备份工具，它的特性如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以镜像保存整个目录树和文件系统&lt;/li&gt;
&lt;li&gt;可以很容易做到保持原来文件的权限、时间、软硬链接等等&lt;/li&gt;
&lt;li&gt;无须特殊权限即可安装&lt;/li&gt;
&lt;li&gt;优化的流程，文件传输效率高&lt;/li&gt;
&lt;li&gt;可以使用rsh、ssh等方式来传输文件，当然也可以通过直接的socket连接&lt;/li&gt;
&lt;li&gt;支持匿名传输&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在使用rsync进行远程同步时，可以使用两种方式：&lt;strong&gt;远程Shell方式&lt;/strong&gt;（用户验证由ssh负责）和 &lt;strong&gt;C/S 方式&lt;/strong&gt;（即客户连接远程rsync服务器，用户验证由rsync服务器负责）。&lt;/p&gt;
&lt;p&gt;无论本地同步目录还是远程同步数据，首次运行时将会把全部文件拷贝一次，以后再运行时将只拷贝有变化的文件（对于新文件）或文件的变化部分（对于原有文件）。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="随手记" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="技术" scheme="http://blog.pzxbc.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="rsync" scheme="http://blog.pzxbc.com/tags/rsync/"/>
    
  </entry>
  
  <entry>
    <title>Python中的字符编码</title>
    <link href="http://blog.pzxbc.com/2017/01/18/python-encoding/"/>
    <id>http://blog.pzxbc.com/2017/01/18/python-encoding/</id>
    <published>2017-01-18T11:22:20.000Z</published>
    <updated>2017-01-18T11:22:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python中用<code>str</code>类型来表示带编码的字符串，不同的字符编码可以通过<code>unicode</code>这个中间格式来转换。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># utf-8编码的字符串</span></span><br><span class="line">a = <span class="string">'测试字符串'</span></span><br><span class="line"><span class="comment"># 转换为unicode</span></span><br><span class="line">ua = a.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 编码为gbk的字符串</span></span><br><span class="line">ga = ua.encode(<span class="string">'gbk'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="解释器中交互输入输出的编码"><a href="#解释器中交互输入输出的编码" class="headerlink" title="解释器中交互输入输出的编码"></a>解释器中交互输入输出的编码</h2><p>Python解释器运行后，<code>stdin</code>和<code>stdout</code>默认的编码是系统的编码，在Windows平台一般是<code>gbk</code>编码，Linux平台一般是<code>utf-8</code>编码。而后你在解释器交互过程中输入输出的字符串都是经过这个默认编码编码过的。</p><p>假设解释器默认的编码是<code>utf-8</code>，但是你在处理过程中产生了<code>gbk</code>编码的字符串，这样的字符串直接输出到控制台是不能正确显示的，因为控制台会按照<code>utf-8</code>的编码格式去解码这个<code>gbk</code>字符串。你可以将这个<code>gbk</code>编码的字符串转为<code>unicode</code>或者<code>utf-8</code>就可以正常<code>print</code>显示。<code>unicode</code>格式的字符串在输出后会按照<code>stdout</code>的编码<code>encode</code>转换。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># utf-8 编码</span></span><br><span class="line">&gt;&gt; a = <span class="string">'测试编码'</span></span><br><span class="line">&gt;&gt; <span class="keyword">print</span> a <span class="comment"># 正常显示</span></span><br><span class="line">&gt;&gt; <span class="keyword">print</span> a.decode(<span class="string">'utf-8'</span>) <span class="comment"># 正常显示 在输出的时候又编码回utf-8</span></span><br><span class="line">&gt;&gt; <span class="keyword">print</span> a.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) <span class="comment"># 显示异常</span></span><br></pre></td></tr></table></figure><h2 id="源文件中的编码"><a href="#源文件中的编码" class="headerlink" title="源文件中的编码"></a>源文件中的编码</h2><p>Python的源文件是纯文本文件，它其中包含的字符也是按照某种字符编码来保存的。比如你用<code>Windows</code>的TXT编辑器，那么保存的默认格式就个<code>gbk</code>编码的文本。你还可以用Notepad++编辑器编辑然后以<code>utf-8</code>格式保存。</p><p>既然源码文件的字符是有编码的字符，那么源码中的字符串肯定也是按照源码文件的编码去编码的。我们怎么将这个编码告诉解释器，使它能够正确地处理这些字符串？</p><p>通过在源文件头部使用下面标签就可以告诉解释器该文件中的字符是什么编码的。一般常用的编码也就是<code>gbk&#39;和</code>utf-8`</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><h2 id="与字符编码有关的其他细节"><a href="#与字符编码有关的其他细节" class="headerlink" title="与字符编码有关的其他细节"></a>与字符编码有关的其他细节</h2><h3 id="StringIO与cStringIO"><a href="#StringIO与cStringIO" class="headerlink" title="StringIO与cStringIO"></a>StringIO与cStringIO</h3><p>StringIO提供了一个缓存区，在这个缓存区上面，我们可以进行类文件操作的调用，比如读和写。cStringIO是其的C语言实现版本，效率上有提高。</p><p>但是请注意，<strong>StringIO可以接收<code>str</code>和<code>unicode</code>，但cStringIO只能接收<code>str</code>格式的。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python中用&lt;code&gt;str&lt;/code&gt;类型来表示带编码的字符串，不同的字符编码可以通过&lt;code&gt;unicode&lt;/code&gt;这个中间格式来转换。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# utf-8编码的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;string&quot;&gt;&#39;测试字符串&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 转换为unicode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ua = a.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 编码为gbk的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ga = ua.encode(&lt;span class=&quot;string&quot;&gt;&#39;gbk&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="随手记" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="技术" scheme="http://blog.pzxbc.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="http://blog.pzxbc.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>v2ray使用</title>
    <link href="http://blog.pzxbc.com/2016/10/19/v2ray-usage/"/>
    <id>http://blog.pzxbc.com/2016/10/19/v2ray-usage/</id>
    <published>2016-10-19T11:15:03.000Z</published>
    <updated>2018-02-24T11:40:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>v2ray是新一代理软件，原生支持Socks、HTTP、Shadowsocks、VMess等协议，内置路由功能，可以选择性转发或者阻止连接。使用v2ray，你需要在墙外有一台可以安装v2ray的服务器（支持Windows、Linux、MacOS、FreeBSD系统），然后在需要翻墙的设备上安装v2ray客户端；另外还可以通过在墙内配置一台v2ray中转服务器，用户直接通过浏览器HTTP代理或者Socks代理连接中转服务器，而中转服务器连接墙外的v2ray（文中使用的就是这种方式）。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在使用<code>yum</code>或者<code>apt-get</code>包管理的系统，可以使用下面命令一键安装，其他系统请参考<a href="https://www.v2ray.com/" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><p>此脚本会自动安装以下文件</p><ul><li>/usr/bin/v2ray/v2ray (v2ray程序)</li><li>/etc/v2ray/config.json (v2ray配置文件)</li></ul><p>此脚本会配置v2ray为service，系统重启后会自动启动v2ray服务。<code>service</code>文件位于下面位置</p><ul><li>/lib/systemd/system/v2ray.service (Systemd)</li><li>/etc/init.d/v2ray (SysV)</li></ul><p>脚本安装完毕后，你需要进行下面操作：</p><ol><li>编辑/etc/v2ray/config.json文件来配置v2ray</li><li>运行v2ray <code>sudo service v2ray start</code></li><li>使用<code>sudo service v2ray start|stop|status|reload</code>控制和查看v2ray</li></ol><p><del>&gt; v2.3版本运行时会出现<code>[Warning]Router: invalid network mask: 128</code>，忽略即可，开发者说是在下一个版本修复。</del></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="墙内中转服务器配置"><a href="#墙内中转服务器配置" class="headerlink" title="墙内中转服务器配置"></a>墙内中转服务器配置</h3><ol><li>支持不同协议接入：Sockets、Http、端口转发</li><li>支持TCP和UDP传出链接。根据策略来选择不同的连接</li><li>不同IP地址是否转发由路由器的iptables决定</li><li>转发Dnsmasq请求</li></ol><a href="/2016/10/19/v2ray-usage/inner_config.json_bak" title="中转配置">中转配置</a><p>注意：<code>vmess</code>协议一定要配置<code>users</code>域，不然启动会出现错误。<code>id</code>为uuid，需要与服务端配置相同，可以在<a href="https://www.uuidgenerator.net/" target="_blank" rel="noopener">这里</a>生成</p><h3 id="墙外服务器配置"><a href="#墙外服务器配置" class="headerlink" title="墙外服务器配置"></a>墙外服务器配置</h3><ol><li>支持不同传入链接</li><li>支持动态端口</li></ol><a href="/2016/10/19/v2ray-usage/outer_config.json_bak" title="外服配置">外服配置</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;v2ray是新一代理软件，原生支持Socks、HTTP、Shadowsocks、VMess等协议，内置路由功能，可以选择性转发或者阻止连接。使用v2ray，你需要在墙外有一台可以安装v2ray的服务器（支持Windows、Linux、MacOS、FreeBSD系统），然后在需要翻墙的设备上安装v2ray客户端；另外还可以通过在墙内配置一台v2ray中转服务器，用户直接通过浏览器HTTP代理或者Socks代理连接中转服务器，而中转服务器连接墙外的v2ray（文中使用的就是这种方式）。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="随手记" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="技术" scheme="http://blog.pzxbc.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="v2ray" scheme="http://blog.pzxbc.com/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup使用</title>
    <link href="http://blog.pzxbc.com/2016/06/17/beautifulsoup-usage/"/>
    <id>http://blog.pzxbc.com/2016/06/17/beautifulsoup-usage/</id>
    <published>2016-06-17T11:19:57.000Z</published>
    <updated>2016-06-17T08:19:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>BeautifulSoup是一个HTML与XML数据分析工具。它可以让你从HTML或者XML中获取你需要的数据以及修改对应数据。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在Debian机器上，可以使用下面命令安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libxml2-dev</span><br><span class="line">sudo apt-get install libxslt1-dev</span><br><span class="line">pip install lxml -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</span><br><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>下面是一个HTML文档，后面的示例中都使用这个文档</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>从BeautifulSoup解析出的字符串是unicode格式，传递给BeautifulSoup的文档最好使用unicode格式。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">soup.title</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line">soup.title.string</span><br><span class="line"><span class="comment"># u'The Dormouse's story'</span></span><br><span class="line"></span><br><span class="line">soup.p</span><br><span class="line"><span class="comment"># &lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">soup.p[<span class="string">'class'</span>]</span><br><span class="line"><span class="comment"># u'title'</span></span><br><span class="line"></span><br><span class="line">soup.find_all(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find(id=<span class="string">"link3"</span>)</span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据定位"><a href="#数据定位" class="headerlink" title="数据定位"></a>数据定位</h3><p>BeautifulSoup提供了很多数据定位的接口供我们操作，我们可以通过这些接口访问节点的子节点、父节点、兄弟节点以及定位到特定节点。</p><p>下面是一个使用<code>find</code>接口定位到特定节点的例子。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag_func</span><span class="params">(tag)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tag.name == <span class="string">u'a'</span> <span class="keyword">and</span> tag.has_attr(<span class="string">'id'</span>) <span class="keyword">and</span> tag[<span class="string">'id'</span>] == <span class="string">u'link2'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">tag = soup.find(tag_func)</span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>获取文档的文字版(去掉HTML标签)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt = soup.get_text()</span><br></pre></td></tr></table></figure><p>字符串迭代器: <code>.strings</code>与<code>.stripped_strings</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> soup.strings:</span><br><span class="line">    print(repr(string))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BeautifulSoup是一个HTML与XML数据分析工具。它可以让你从HTML或者XML中获取你需要的数据以及修改对应数据。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.pzxbc.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://blog.pzxbc.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Beautifulsoup" scheme="http://blog.pzxbc.com/tags/Beautifulsoup/"/>
    
  </entry>
  
</feed>
